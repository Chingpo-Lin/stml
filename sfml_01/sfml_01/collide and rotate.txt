// sfml_01.cpp : 此文件包含 "main" 函数。程序执行将在此处开始并结束。
//

#include <iostream>
#include <SFML\Graphics.hpp>
#include <SFML\Audio.hpp>

int main()
{
    // first param and second are the size and name of window
    // resize is enable resize, close is enable the close option, but if we don't write param three, we still have the function
    sf::RenderWindow window(sf::VideoMode(800, 600), "SFML Window"); //, sf::Style::Resize | sf::Style::Close);
    
    // window.setVerticalSyncEnabled(true); set refresh rate to same as monitor 
    window.setFramerateLimit(60); // same as above, when monitor is 60

    window.setKeyRepeatEnabled(false);

    bool play = true;
    sf::Event event;
    sf::Font font;
    if (!font.loadFromFile("data/font1.otf")) {
        // code when fail
    }

    // states
    bool rButton = false;
    bool leftButton = false, rightButton = false, upButton = false, downButton = false;

    // Variables
    int rectRotation = 0;
    int xVelocity = 0, yVelocity = 0;

    // Shape
    sf::RectangleShape shape1;
    shape1.setSize(sf::Vector2f(50, 50));
    shape1.setPosition(400, 300);
    shape1.setFillColor(sf::Color::Blue);

    sf::RectangleShape shape2;
    shape2.setSize(sf::Vector2f(100, 200));
    shape2.setPosition(200, 200);
    shape2.setFillColor(sf::Color::Red);

    while (play) 
    {
        while (window.pollEvent(event)) 
        {
            // close the window when click X
            if (event.type == sf::Event::Closed) 
            {
                play = false;
            }

            if (event.type == sf::Event::KeyPressed)
            {
                if (event.key.code == sf::Keyboard::R) rButton = true;
                if (event.key.code == sf::Keyboard::Left) leftButton = true;
                if (event.key.code == sf::Keyboard::Right) rightButton = true;
                if (event.key.code == sf::Keyboard::Up) upButton = true;
                if (event.key.code == sf::Keyboard::Down) downButton = true;
            }

            if (event.type == sf::Event::KeyReleased)
            {
                if (event.key.code == sf::Keyboard::R) rButton = false;
                if (event.key.code == sf::Keyboard::Left) leftButton = false;
                if (event.key.code == sf::Keyboard::Right) rightButton = false;
                if (event.key.code == sf::Keyboard::Up) upButton = false;
                if (event.key.code == sf::Keyboard::Down) downButton = false;
            }
        }
        
        // Logic handling
        if (rButton)
        {
            rectRotation++;
            shape1.setRotation(rectRotation);
        }
        
        // reset
        xVelocity = yVelocity = 0;
        // Movement
        if (rightButton)
        {
            xVelocity += 5;
        }
        if (leftButton)
        {
            xVelocity -= 5;
        }

        if (upButton)
        {
            yVelocity -= 5;
        }
        if (downButton)
        {
            yVelocity += 5;
        }

        shape1.move(xVelocity, 0);

        if (shape1.getGlobalBounds().intersects(shape2.getGlobalBounds())) 
        {
            shape1.move(-xVelocity, 0);
        }
        shape1.move(0, yVelocity);

        if (shape1.getGlobalBounds().intersects(shape2.getGlobalBounds()))
        {
            shape1.move(0, -yVelocity);
        }
        // Rendering part of the main game loop
        //window.clear(sf::Color(255, 0, 0));
        window.clear();
        // Draw things
        window.draw(shape1);
        window.draw(shape2);
 
        window.display(); // enable resize
    }
    return 0;
}


